[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools~=68.0.0",
    "setuptools_scm[toml]~=7.1.0"
]

[project]
authors = [
    {name = "Savannah Informatics Global Health Institute"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: Freeware",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Utilities",
    "Typing :: Typed"
]
dependencies = [
    "antlr4-python3-runtime==4.13.0",
    "attrs~=23.2.0",
    "cattrs~=23.2.3",
    "click~=8.1.7",
    # Pin this to 3.0.10. See this issue for details:
    # https://github.com/pyexcel/pyexcel-xlsx/issues/52
    "openpyxl==3.0.10",
    "pyexcel~=0.7.0",
    "pyexcel-io~=0.6.6",
    "pyexcel-xls~=0.7.0",
    "pyexcel-xlsx~=0.6.0",
    "requests~=2.32.3",
    "sghi-commons @ git+https://github.com/savannahghi/sghi-commons.git@v1.4.0",
    "sghi-etl-commons @ git+https://github.com/savannahghi/sghi-etl-commons.git@v1.1.0-rc.2",
    "typing_extensions>=4.8.0",
]
description = "Mentorship tools as XForms."
dynamic = ["version"]
keywords = ["sghi", "pepfar", "mentorship", "xforms", "odk"]
license = {file = "LICENSE"}
maintainers = [
    {name = "Kennedy Kori", email = "kennedykori47@gmail.com"},
    {name = "Salad Guyo", email = "saladguyo60@gmail.com"}
]
name = "mentorship-xls-forms"
readme = "README.md"
requires-python = ">=3.12" # Support Python 3.12+.

[project.optional-dependencies]
dev = [
    "pre-commit~=3.7.1",
]

docs = [
    "furo==2024.5.6",
    "jaraco.packaging~=10.1.0",
    "rst.linker~=2.6.0",
    "Sphinx~=7.3.7",
    "sphinx-favicon~=1.0.1",
    "sphinx-hoverxref~=1.4.0",
    "sphinx-inline-tabs~=2023.4.21",
    "sphinx-lint~=0.9.1",
    "sphinx-notfound-page~=1.0.2",
]

test = [
    "coverage~=7.5.3",
    "coveralls~=4.0.1",
    "factory-boy~=3.3.0",
    "packaging",
    "pyright>=1.1.365",
    "pytest~=8.2.1",
    "pytest-cov~=5.0.0",
    "pytest-forked~=1.6.0",
    "pytest-sugar~=1.0.0",
    "pytest-xdist~=3.6.1",
    "ruff~=0.4.7",
    "tox~=4.15.0",
    "tox-gh-actions~=3.2.0",
]

[project.scripts]
mentorship-xls-forms = "sghi.mentorship_xls_forms.cli.__main__:main"

[project.urls]
changelog = "https://github.com/savannahghi/mentorship-xls-form/blob/develop/docs/CHANGELOG.md"
documentation = "https://github.com/savannahghi/mentorship-xls-form/blob/develop/README.md"
homepage = "https://github.com/savannahghi/mentorship-xls-form"
repository = "https://github.com/savannahghi/mentorship-xls-form.git"

[tool.black]
extend-exclude = """
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  ^/docs/_*.py
)
"""

[tool.coverage.html]
directory = "coverage"

[tool.coverage.report]
exclude_lines = [
    # Have to re-enable the standard pragma:
    "pragma: no branch",
    "pragma: nocover",
    "pragma: no cover",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain about abstract methods, they aren't run:
    '@(abc\.)?abstractmethod',

    # Don't complain about conditional TYPE_CHECKING blocks:
    'if (typing\.)?TYPE_CHECKING:',

    # Don't complain about overloads:
    '@(typing\.)?overload',
]
show_missing = true

[tool.coverage.run]
branch = true
omit = [".tox/*", "docs/*", "*/generated/*", "test/*"]

[tool.isort]
extend_skip = "docs"
extend_skip_glob = ["*/build/*", "*/docs/*", "*/generated/*"]
known_first_party = ["sghi", "test"]
line_length = 79
multi_line_output = 3
profile = "black"

[tool.pyright]
analyzeUnannotatedFunctions = true
enableTypeIgnoreComments = true
exclude = [
    "**/.*",
    "**/__pycache__",
    "**/generated",
    "**/node_modules",
]
reportConstantRedefinition = "error"
reportDeprecated = "warning"
reportDuplicateImport = "error"
reportGeneralTypeIssues = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportMissingSuperCall = "warning"
reportMissingTypeStubs = "information"
reportOverlappingOverload = "warning"
reportPrivateUsage = "error"
reportPropertyTypeMismatch = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedImport = "error"
reportUnusedVariable = "warning"
reportWildcardImportFromLibrary = "warning"
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
typeCheckingMode = "basic"

[tool.pytest.ini_options]
addopts = "--cov=src/sghi --cov-fail-under=100 --cov-report=html --cov-report=term-missing -n auto --junitxml='junitxml_report/report.xml' -vv --durations=10 --cache-clear"
console_output_style = "progress"
log_cli = 1
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "[%(levelname)8s]-%(asctime)s (%(filename)s:%(lineno)s) - %(message)s"
log_cli_level = "WARNING"
python_files = ["*test.py", "*tests.py", "test_*.py"]
norecursedirs = "node_modules venv build env bin .cache .tox"

[tool.ruff]
extend-exclude = [
    "**/generated/**/*.py",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    ".pytype",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "docs",
    "genarated",
    "node_modules",
    "venv",
]
line-length = 79
src = ["src", "test"]
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
ignore = [
    "ANN002",
    "ANN003",
    "ANN101",
    "ANN102",
    "ANN204",
    "COM812",
    "D203",
    "D213",
    "ISC001",
    "S101",
]
select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "COM", # flake8-commas
    # "D",   # pydocstyle
    "E",   # pycodestyle Error
    "EM",  # flake8-errmsg
    "ERA", # eradicate
    "F",   # pyflakes
    "G",   # flake8-logging-format
    "I",   # isort
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8 Naming
    "PD",  # pandas-vet
    "PT",  # flake8-pytest-style
    "PYI", # flake8-pyi
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RUF", # Ruff-specific rules
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "UP",  # pyupgrade
    "W",   # pycodestyle Warning
    "YTT", # flake8-2020
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.isort]
known-first-party = ["sghi"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

[tool.setuptools_scm]
root = "."

[tool.tox]
legacy_tox_ini = """
    [tox]
    env_list = py312, coveralls, docs, package
    isolated_build = true
    no_package = false
    requires =
        tox>4
    skip_missing_interpreters = true


    [gh-actions]
    python =
        3.12: py312, coveralls, docs, package


    [testenv]
    commands =
        ruff check .
        ruff format --check .
        pyright .
        coverage erase
        -pytest {posargs:.}
        coverage html
    deps =
        .
    description = test and lint the project
    download = true
    extras =
        test
    set_env =
        PYTHONPATH = {toxinidir}/src
        PYRIGHT_PYTHON_FORCE_VERSION = latest


    ;If running outside Github, ensure that the the `COVERALLS_REPO_TOKEN`
    ;environment variable is set.
    [testenv:coveralls]
    commands =
        coveralls --service=github
    description = submit coverage results to coverall.io
    extras =
        test
    pass_env =
        COVERALLS_REPO_TOKEN
        GITHUB_*


    [testenv:docs]
    changedir = docs
    commands =
        -sphinx-build -EW --keep-going -b html . {toxinidir}/docs/build/html
        sphinx-lint -i api
    description = build sphinx documentation
    extras =
        docs


    [testenv:package]
    commands =
        python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)"
        python -m build
    depends = testenv
    deps =
        build
    description = build the library
    skip_install = true
"""
